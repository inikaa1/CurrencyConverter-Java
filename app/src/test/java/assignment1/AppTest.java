/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    // Admin Test Cases
    @Test void setNewExchangeRates() {
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        admin.set_new_rate("AUD", "TWD", 21.0);
        assertEquals(admin.get_exchange_rate("AUD", "TWD"), 21.0);

        // checks if the most updated rate would be gotten
        admin.set_new_rate("AUD", "TWD", 22.0);
        admin.set_new_rate("AUD", "TWD", 20.0);
        admin.set_new_rate("AUD", "TWD", 18.0);
        assertEquals(admin.get_exchange_rate("AUD", "TWD"), 18.0);

        admin.set_new_rate("TWD", "CNY", 0.25);
        assertEquals(admin.get_exchange_rate("TWD", "CNY"), 0.25);

        admin.set_new_rate("INR", "AUD", 0.020);
        assertEquals(admin.get_exchange_rate("INR", "AUD"), 0.020);

        admin.set_new_rate("CNY", "AUD", 0.25);
        assertEquals(admin.get_exchange_rate("CNY", "AUD"), 0.25);

        admin.set_new_rate("EUR", "TWD", 31.2);
        assertEquals(admin.get_exchange_rate("EUR", "TWD"), 31.2);

        admin.set_new_rate("EUR", "AUD", 1.48);
        assertEquals(admin.get_exchange_rate("EUR", "AUD"), 1.48);

        admin.set_new_rate("EUR", "CNY", 6.98);
        assertEquals(admin.get_exchange_rate("EUR", "CNY"), 6.98);

        admin.set_new_rate("EUR", "INR", 79.69);
        assertEquals(admin.get_exchange_rate("EUR", "INR"), 79.69);

        System.out.print(user.get_mean("AUD","TWD","12-09-2022","14-09-2022"));

    }
    @Test void nondataPath(){
        AdminUser admin = new AdminUser("popXRatesTest.csv", "");

        admin.set_new_rate("EUR", "INR", 78.79);

    }
    @Test void nonconfigPath(){
        AdminUser admin = new AdminUser("", "xRatesTest.csv");
        String array[] = new String[] {"INR", "AUD", "TWD", "CNY"};
        admin.set_popular_currencies(array);

    }

    @Test void checkNewIncrease() {
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        
        admin.set_new_rate("AUD", "TWD", 20.0);
        admin.set_new_rate("AUD", "TWD", 18.0);
        assertFalse(admin.check_increase("AUD", "TWD"));

        admin.set_new_rate("TWD", "CNY", 0.24);
        admin.set_new_rate("TWD", "CNY", 0.25);
        assertTrue(admin.check_increase("TWD", "CNY"));
    }
    
    @Test void checkNewDecrease() {
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        

        admin.set_new_rate("AUD", "TWD", 20.0);
        admin.set_new_rate("AUD", "TWD", 18.0);
        assertTrue(admin.check_decrease("AUD", "TWD"));

        admin.set_new_rate("TWD", "CNY", 0.22);
        assertTrue(admin.check_decrease("TWD", "CNY"));
        


//        admin.set_new_rate("")
    }

    @Test void setNewPopularCurrency() {
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        String array[] = new String[] {"EUR", "AUD", "TWD", "CNY"};
        admin.set_popular_currencies(array);
        assertArrayEquals(new String[] {"EUR", "AUD", "TWD", "CNY"}, new String[] {"EUR", "AUD", "TWD", "CNY"});
    }


    // Normal User Test Cases
    

    @Test void getExchangeRate() {
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        admin.set_new_rate("EUR", "AUD", 1.50);
        assertEquals(user.get_exchange_rate("EUR", "AUD"), 1.50);
    }
    @Test void getPopularCurrencies(){
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        String array[] = new String[] {"EUR", "AUD", "TWD", "CNY"};
        admin.set_popular_currencies(array);
        user.get_popular_currencies();
        assertArrayEquals(new String[] {"EUR", "AUD", "TWD", "CNY"}, new String[] {"EUR", "AUD", "TWD", "CNY"});
    }
    
    @Test void convertRate(){
        NormalUser user = new NormalUser("popXRatesTest.csv","xRatesTest.csv");
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");

        admin.set_new_rate("AUD","INR",1.5);
        user.convert_currencies("AUD","INR", 100.0);
        assertEquals(user.get_exchange_rate("AUD", "INR")*100.0, 150.0);
    }
    

    @Test void fileNotFound(){
        NormalUser user = new NormalUser("popXRatesTest.csv","xRatesTes.csv");

        System.out.print(user.get_mean("AUD","TWD","12-09-2022","14-09-2022"));

    }

    @Test void configPathNotFound(){
        NormalUser user = new NormalUser("popXRatesTes.csv","xRatesTes.csv");

        user.get_popular_currencies();
    }

    @Test void moreCurrencies(){
        AdminUser admin = new AdminUser("popXRatesTest.csv", "xRatesTest.csv");
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        String array[] = new String[] {"EUR", "AUD", "TWD", "CNY","INR"};
        admin.set_popular_currencies(array);
        user.get_popular_currencies();
    }

    @Test void historydataNotFound(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTes.csv");

        user.get_exchange_rate("AUD","INR");
    }

    @Test void rateMin(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        assertEquals(user.get_min_value("AUD","TWD","15-08-2022","17-08-2022"),18.0);
    }

    @Test void rateMax(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        assertEquals(user.get_max_value("AUD","TWD","15-08-2022","17-08-2022"),22.0);
    }

    @Test void rateStd(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        assertEquals(user.get_std_dev("AUD","TWD","15-08-2022","17-08-2022"),1.473);
    }

    @Test void rateMedian(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        assertEquals(user.get_median("AUD","TWD","15-08-2022","17-08-2022"),20.0);
    }

    @Test void rateMedian2(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        assertEquals(user.get_median("EUR","TWD","18-08-2022","20-08-2022"),31.2);
    }

    @Test void getsummariesInfo(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        System.out.print(user.get_summary("AUD", "TWD", "15-08-2022", "17-08-2022"));

    }

    @Test void history_string(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");

        System.out.print(user.get_interval_history_string_array("AUD", "TWD", "15-08-2022", "17-09-2022"));
    }

    @Test void history_stringNotFound(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTes.csv");
        System.out.print(user.get_interval_history_string_array("AUD", "TWD", "15-08-2022", "17-09-2022"));

    }

    @Test void history_dateNotFound(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTes.csv");
        System.out.print(user.get_interval_history("AUD", "TWD", "15-0j-2022", "17-09-2022"));

    }
    @Test void historyString_dateNotFound(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTes.csv");
        System.out.print(user.get_interval_history_string_array("AUD", "TWD", "15-0j-2022", "17-09-2022"));

    }

    @Test void tableOfPopular(){
        NormalUser user = new NormalUser("popXRatesTest.csv", "xRatesTest.csv");
        System.out.print(user.create_table());

    }
    //GUI test
    @Test void runGUI(){
        GUI app = new GUI();
        app.run();
    }

    




}

